// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	entity "github.com/limbo/discipline/pkg/entity"
)

// MockUsersRepositoryI is a mock of UsersRepositoryI interface.
type MockUsersRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryIMockRecorder
}

// MockUsersRepositoryIMockRecorder is the mock recorder for MockUsersRepositoryI.
type MockUsersRepositoryIMockRecorder struct {
	mock *MockUsersRepositoryI
}

// NewMockUsersRepositoryI creates a new mock instance.
func NewMockUsersRepositoryI(ctrl *gomock.Controller) *MockUsersRepositoryI {
	mock := &MockUsersRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepositoryI) EXPECT() *MockUsersRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepositoryI) Create(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryIMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepositoryI)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUsersRepositoryI) Delete(ctx context.Context, uid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersRepositoryIMockRecorder) Delete(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersRepositoryI)(nil).Delete), ctx, uid)
}

// FindByID mocks base method.
func (m *MockUsersRepositoryI) FindByID(ctx context.Context, uid uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, uid)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUsersRepositoryIMockRecorder) FindByID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUsersRepositoryI)(nil).FindByID), ctx, uid)
}

// FindByName mocks base method.
func (m *MockUsersRepositoryI) FindByName(ctx context.Context, name string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockUsersRepositoryIMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockUsersRepositoryI)(nil).FindByName), ctx, name)
}

// Update mocks base method.
func (m *MockUsersRepositoryI) Update(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepositoryIMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepositoryI)(nil).Update), ctx, user)
}

// MockHabitsRepositoryI is a mock of HabitsRepositoryI interface.
type MockHabitsRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockHabitsRepositoryIMockRecorder
}

// MockHabitsRepositoryIMockRecorder is the mock recorder for MockHabitsRepositoryI.
type MockHabitsRepositoryIMockRecorder struct {
	mock *MockHabitsRepositoryI
}

// NewMockHabitsRepositoryI creates a new mock instance.
func NewMockHabitsRepositoryI(ctrl *gomock.Controller) *MockHabitsRepositoryI {
	mock := &MockHabitsRepositoryI{ctrl: ctrl}
	mock.recorder = &MockHabitsRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitsRepositoryI) EXPECT() *MockHabitsRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHabitsRepositoryI) Create(ctx context.Context, habit *entity.Habit) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, habit)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHabitsRepositoryIMockRecorder) Create(ctx, habit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabitsRepositoryI)(nil).Create), ctx, habit)
}

// Delete mocks base method.
func (m *MockHabitsRepositoryI) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHabitsRepositoryIMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHabitsRepositoryI)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockHabitsRepositoryI) GetByID(ctx context.Context, id uuid.UUID) (*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockHabitsRepositoryIMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockHabitsRepositoryI)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockHabitsRepositoryI) GetByUserID(ctx context.Context, uid uuid.UUID, limit, offset int) ([]*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, uid, limit, offset)
	ret0, _ := ret[0].([]*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockHabitsRepositoryIMockRecorder) GetByUserID(ctx, uid, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockHabitsRepositoryI)(nil).GetByUserID), ctx, uid, limit, offset)
}

// Update mocks base method.
func (m *MockHabitsRepositoryI) Update(ctx context.Context, habit *entity.Habit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, habit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHabitsRepositoryIMockRecorder) Update(ctx, habit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHabitsRepositoryI)(nil).Update), ctx, habit)
}

// MockHabitChecksRepositoryI is a mock of HabitChecksRepositoryI interface.
type MockHabitChecksRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockHabitChecksRepositoryIMockRecorder
}

// MockHabitChecksRepositoryIMockRecorder is the mock recorder for MockHabitChecksRepositoryI.
type MockHabitChecksRepositoryIMockRecorder struct {
	mock *MockHabitChecksRepositoryI
}

// NewMockHabitChecksRepositoryI creates a new mock instance.
func NewMockHabitChecksRepositoryI(ctrl *gomock.Controller) *MockHabitChecksRepositoryI {
	mock := &MockHabitChecksRepositoryI{ctrl: ctrl}
	mock.recorder = &MockHabitChecksRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitChecksRepositoryI) EXPECT() *MockHabitChecksRepositoryIMockRecorder {
	return m.recorder
}

// CountByHabitID mocks base method.
func (m *MockHabitChecksRepositoryI) CountByHabitID(ctx context.Context, habitID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByHabitID", ctx, habitID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByHabitID indicates an expected call of CountByHabitID.
func (mr *MockHabitChecksRepositoryIMockRecorder) CountByHabitID(ctx, habitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByHabitID", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).CountByHabitID), ctx, habitID)
}

// Create mocks base method.
func (m *MockHabitChecksRepositoryI) Create(ctx context.Context, habitID uuid.UUID, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, habitID, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHabitChecksRepositoryIMockRecorder) Create(ctx, habitID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).Create), ctx, habitID, date)
}

// Delete mocks base method.
func (m *MockHabitChecksRepositoryI) Delete(ctx context.Context, habitID uuid.UUID, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, habitID, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHabitChecksRepositoryIMockRecorder) Delete(ctx, habitID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).Delete), ctx, habitID, date)
}

// Exists mocks base method.
func (m *MockHabitChecksRepositoryI) Exists(ctx context.Context, habitID uuid.UUID, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, habitID, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockHabitChecksRepositoryIMockRecorder) Exists(ctx, habitID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).Exists), ctx, habitID, date)
}

// GetByHabitAndDateRange mocks base method.
func (m *MockHabitChecksRepositoryI) GetByHabitAndDateRange(ctx context.Context, habitID uuid.UUID, from, to time.Time) ([]entity.HabitCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHabitAndDateRange", ctx, habitID, from, to)
	ret0, _ := ret[0].([]entity.HabitCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHabitAndDateRange indicates an expected call of GetByHabitAndDateRange.
func (mr *MockHabitChecksRepositoryIMockRecorder) GetByHabitAndDateRange(ctx, habitID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHabitAndDateRange", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).GetByHabitAndDateRange), ctx, habitID, from, to)
}

// GetLastCheckDate mocks base method.
func (m *MockHabitChecksRepositoryI) GetLastCheckDate(ctx context.Context, habitID uuid.UUID) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCheckDate", ctx, habitID)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCheckDate indicates an expected call of GetLastCheckDate.
func (mr *MockHabitChecksRepositoryIMockRecorder) GetLastCheckDate(ctx, habitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCheckDate", reflect.TypeOf((*MockHabitChecksRepositoryI)(nil).GetLastCheckDate), ctx, habitID)
}

// MockDBConfig is a mock of DBConfig interface.
type MockDBConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDBConfigMockRecorder
}

// MockDBConfigMockRecorder is the mock recorder for MockDBConfig.
type MockDBConfigMockRecorder struct {
	mock *MockDBConfig
}

// NewMockDBConfig creates a new mock instance.
func NewMockDBConfig(ctrl *gomock.Controller) *MockDBConfig {
	mock := &MockDBConfig{ctrl: ctrl}
	mock.recorder = &MockDBConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConfig) EXPECT() *MockDBConfigMockRecorder {
	return m.recorder
}

// ConnString mocks base method.
func (m *MockDBConfig) ConnString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnString indicates an expected call of ConnString.
func (mr *MockDBConfigMockRecorder) ConnString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnString", reflect.TypeOf((*MockDBConfig)(nil).ConnString))
}

// MockPgConnection is a mock of PgConnection interface.
type MockPgConnection struct {
	ctrl     *gomock.Controller
	recorder *MockPgConnectionMockRecorder
}

// MockPgConnectionMockRecorder is the mock recorder for MockPgConnection.
type MockPgConnectionMockRecorder struct {
	mock *MockPgConnection
}

// NewMockPgConnection creates a new mock instance.
func NewMockPgConnection(ctrl *gomock.Controller) *MockPgConnection {
	mock := &MockPgConnection{ctrl: ctrl}
	mock.recorder = &MockPgConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgConnection) EXPECT() *MockPgConnectionMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockPgConnection) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPgConnectionMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPgConnection)(nil).Begin), ctx)
}

// Exec mocks base method.
func (m *MockPgConnection) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgConnectionMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgConnection)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockPgConnection) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPgConnectionMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPgConnection)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockPgConnection) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPgConnectionMockRecorder) Query(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPgConnection)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPgConnection) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPgConnectionMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgConnection)(nil).QueryRow), varargs...)
}
