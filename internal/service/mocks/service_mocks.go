// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	service "github.com/limbo/discipline/internal/service"
	entity "github.com/limbo/discipline/pkg/entity"
)

// MockUserServiceI is a mock of UserServiceI interface.
type MockUserServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceIMockRecorder
}

// MockUserServiceIMockRecorder is the mock recorder for MockUserServiceI.
type MockUserServiceIMockRecorder struct {
	mock *MockUserServiceI
}

// NewMockUserServiceI creates a new mock instance.
func NewMockUserServiceI(ctrl *gomock.Controller) *MockUserServiceI {
	mock := &MockUserServiceI{ctrl: ctrl}
	mock.recorder = &MockUserServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceI) EXPECT() *MockUserServiceIMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockUserServiceI) DeleteAccount(ctx context.Context, id uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockUserServiceIMockRecorder) DeleteAccount(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockUserServiceI)(nil).DeleteAccount), ctx, id, password)
}

// GetByID mocks base method.
func (m *MockUserServiceI) GetByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceIMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserServiceI)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockUserServiceI) GetByName(ctx context.Context, name string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockUserServiceIMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUserServiceI)(nil).GetByName), ctx, name)
}

// Login mocks base method.
func (m *MockUserServiceI) Login(ctx context.Context, name, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, name, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceIMockRecorder) Login(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceI)(nil).Login), ctx, name, password)
}

// Register mocks base method.
func (m *MockUserServiceI) Register(ctx context.Context, req *service.RegisterRequest) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceIMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceI)(nil).Register), ctx, req)
}

// MockHabitsServiceI is a mock of HabitsServiceI interface.
type MockHabitsServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockHabitsServiceIMockRecorder
}

// MockHabitsServiceIMockRecorder is the mock recorder for MockHabitsServiceI.
type MockHabitsServiceIMockRecorder struct {
	mock *MockHabitsServiceI
}

// NewMockHabitsServiceI creates a new mock instance.
func NewMockHabitsServiceI(ctrl *gomock.Controller) *MockHabitsServiceI {
	mock := &MockHabitsServiceI{ctrl: ctrl}
	mock.recorder = &MockHabitsServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitsServiceI) EXPECT() *MockHabitsServiceIMockRecorder {
	return m.recorder
}

// CreateHabit mocks base method.
func (m *MockHabitsServiceI) CreateHabit(ctx context.Context, uid uuid.UUID, req service.CreateHabitRequest) (*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabit", ctx, uid, req)
	ret0, _ := ret[0].(*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabit indicates an expected call of CreateHabit.
func (mr *MockHabitsServiceIMockRecorder) CreateHabit(ctx, uid, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabit", reflect.TypeOf((*MockHabitsServiceI)(nil).CreateHabit), ctx, uid, req)
}

// DeleteHabit mocks base method.
func (m *MockHabitsServiceI) DeleteHabit(ctx context.Context, habitID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHabit", ctx, habitID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHabit indicates an expected call of DeleteHabit.
func (mr *MockHabitsServiceIMockRecorder) DeleteHabit(ctx, habitID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHabit", reflect.TypeOf((*MockHabitsServiceI)(nil).DeleteHabit), ctx, habitID, userID)
}

// GetHabit mocks base method.
func (m *MockHabitsServiceI) GetHabit(ctx context.Context, habitID, userID uuid.UUID) (*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHabit", ctx, habitID, userID)
	ret0, _ := ret[0].(*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHabit indicates an expected call of GetHabit.
func (mr *MockHabitsServiceIMockRecorder) GetHabit(ctx, habitID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHabit", reflect.TypeOf((*MockHabitsServiceI)(nil).GetHabit), ctx, habitID, userID)
}

// GetUserHabits mocks base method.
func (m *MockHabitsServiceI) GetUserHabits(ctx context.Context, uid uuid.UUID, pagination service.PaginationOpts) ([]*entity.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHabits", ctx, uid, pagination)
	ret0, _ := ret[0].([]*entity.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHabits indicates an expected call of GetUserHabits.
func (mr *MockHabitsServiceIMockRecorder) GetUserHabits(ctx, uid, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHabits", reflect.TypeOf((*MockHabitsServiceI)(nil).GetUserHabits), ctx, uid, pagination)
}
